// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  username    String   @unique
  password    String
  firstName   String?
  lastName    String?
  avatar      String?
  phone       String?  @unique
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  // 关联关系
  userRoles UserRole[]
  sessions  UserSession[]
  apiLogs   ApiLog[]

  @@map("users")
}

// 角色表
model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  code        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  userRoles       UserRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

// 权限表
model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  code        String   @unique
  resource    String
  action      String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  rolePermissions RolePermission[]

  @@map("permissions")
}

// 用户角色关联表
model UserRole {
  id       Int @id @default(autoincrement())
  userId   Int
  roleId   Int
  assignedAt DateTime @default(now())
  assignedBy Int?

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

// 角色权限关联表
model RolePermission {
  id           Int @id @default(autoincrement())
  roleId       Int
  permissionId Int
  assignedAt   DateTime @default(now())
  assignedBy   Int?

  // 关联关系
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// 用户会话表
model UserSession {
  id           String    @id @default(uuid())
  userId       Int
  accessToken  String
  refreshToken String
  deviceInfo   String?
  ipAddress    String?
  userAgent    String?
  isActive     Boolean   @default(true)
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  revokedAt    DateTime?

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accessToken])
  @@index([refreshToken])
  @@map("user_sessions")
}

// API日志表
model ApiLog {
  id         String   @id @default(uuid())
  requestId  String   @unique
  userId     Int?
  method     String
  url        String
  params     Json?
  body       Json?
  response   Json?
  statusCode Int
  duration   Int      // 响应时间（毫秒）
  ip         String
  userAgent  String?
  error      String?
  createdAt  DateTime @default(now())

  // 关联关系
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([requestId])
  @@index([userId])
  @@index([createdAt])
  @@index([statusCode])
  @@map("api_logs")
}

// 错误日志表
model ErrorLog {
  id        String   @id @default(uuid())
  requestId String?
  errorCode String
  message   String
  stack     String?
  context   Json?
  userId    Int?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([requestId])
  @@index([errorCode])
  @@index([createdAt])
  @@map("error_logs")
}

// 系统配置表
model SystemConfig {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  type        String   @default("string") // string, number, boolean, json
  isPublic    Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_configs")
}

// 审计日志表
model AuditLog {
  id         String   @id @default(uuid())
  userId     Int?
  action     String
  resource   String
  resourceId String?
  oldData    Json?
  newData    Json?
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@map("audit_logs")
}
