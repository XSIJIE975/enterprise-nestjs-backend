version: '3.8'

# 自定义项目名称（Docker Compose V2 语法）
name: enterprise-dev

services:
  mysql:
    image: mysql:8.0
    container_name: enterprise-mysql-dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: enterprise_db
      MYSQL_USER: app_user
      MYSQL_PASSWORD: app_password
      TZ: Asia/Shanghai
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-time-zone='+08:00'
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: enterprise-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 可选：数据库管理工具
  adminer:
    image: adminer
    container_name: enterprise-adminer-dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      ADMINER_DEFAULT_SERVER: mysql

  # 可选：Redis管理工具
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: enterprise-redis-commander-dev
    restart: unless-stopped
    environment:
      REDIS_HOSTS: redis:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_healthy

volumes:
  mysql_data:
  redis_data:

networks:
  default:
    name: enterprise-dev-network
