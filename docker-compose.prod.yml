version: '3.8'

# 自定义项目名称（Docker Compose V2 语法）
name: enterprise-prod

services:
  # NestJS 应用服务
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: enterprise-app-prod
    ports:
      - "${PORT:-8002}:8002"  # 使用环境变量配置端口，默认 8002（生产环境）
    env_file:
      - .env.production  # 从文件加载所有环境变量
    environment:
      # 覆盖特定环境变量（Docker 内部网络地址）
      - DATABASE_URL=mysql://${DB_USERNAME:-app_user}:${DB_PASSWORD:-app_password}@mysql:3306/${DB_DATABASE:-enterprise_db}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8002/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - enterprise-prod-network

  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: enterprise-mysql-prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-prod_root_password}
      MYSQL_DATABASE: ${DB_DATABASE:-enterprise_db}
      MYSQL_USER: ${DB_USERNAME:-app_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-app_password}
      TZ: Asia/Shanghai
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-time-zone='+08:00'
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD:-prod_root_password}"]
      timeout: 20s
      retries: 10
      interval: 10s
    networks:
      - enterprise-prod-network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: enterprise-redis-prod
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_prod_data:/data
    command: >
      sh -c "redis-server 
      --appendonly yes 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      $([ -n '${REDIS_PASSWORD}' ] && echo '--requirepass ${REDIS_PASSWORD}' || echo '')"
    healthcheck:
      test: >
        sh -c "if [ -n '${REDIS_PASSWORD}' ]; then 
          redis-cli --no-auth-warning -a '${REDIS_PASSWORD}' ping; 
        else 
          redis-cli ping; 
        fi"
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - enterprise-prod-network

  # Nginx 反向代理 (可选 - 需要先创建 nginx/ 目录和配置文件)
  # 取消注释以下内容启用 Nginx
  # nginx:
  #   image: nginx:alpine
  #   container_name: enterprise-nginx-prod
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - app
  #   networks:
  #     - enterprise-prod-network

volumes:
  mysql_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  enterprise-prod-network:
    name: enterprise-prod-network
    driver: bridge