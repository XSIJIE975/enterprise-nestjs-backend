version: '3.8'

services:
  # NestJS 应用服务
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: enterprise-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=mysql://app_user:app_password@mysql:3306/enterprise_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_ACCESS_SECRET=production-super-secret-jwt-access-key-64-chars-minimum
      - JWT_REFRESH_SECRET=production-super-secret-jwt-refresh-key-64-chars-minimum
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: enterprise-mysql-prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: prod_root_password_change_this
      MYSQL_DATABASE: enterprise_db
      MYSQL_USER: app_user
      MYSQL_PASSWORD: app_password_change_this
    ports:
      - "3306:3306"
    volumes:
      - mysql_prod_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - app-network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: enterprise-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    command: redis-server --appendonly yes --requirepass redis_password_change_this
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "redis_password_change_this", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  # Nginx 反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: enterprise-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - app-network

volumes:
  mysql_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  app-network:
    driver: bridge