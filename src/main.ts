import { NestFactory } from '@nestjs/core';
import { NestExpressApplication } from '@nestjs/platform-express';
import { ValidationPipe } from '@nestjs/common';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { ConfigService } from '@nestjs/config';
import * as compression from 'compression';
import * as express from 'express';
import helmet from 'helmet';
import { join } from 'path';
import { AppModule } from './app.module';
import { AllExceptionsFilter } from './common/filters/http-exception.filter';
import { LoggerService } from './shared/logger/logger.service';

async function bootstrap() {
  const app = await NestFactory.create<NestExpressApplication>(AppModule, {
    bufferLogs: true,
  });

  const configService = app.get(ConfigService);
  const loggerService = app.get(LoggerService);

  // ‰ΩøÁî®Ëá™ÂÆö‰πâÊó•ÂøóÊúçÂä°
  app.useLogger(loggerService);

  // ‰ø°‰ªª‰ª£ÁêÜÔºåËé∑ÂèñÁúüÂÆûIPÔºàÁî®‰∫éÈôêÊµÅÂíåÊó•ÂøóÔºâ
  // true: ‰ø°‰ªªÊâÄÊúâ‰ª£ÁêÜÔºà‰∏çÂÆâÂÖ®Ôºå‰ªÖÂºÄÂèëÁéØÂ¢ÉÔºâ
  // false: ‰∏ç‰ø°‰ªª‰ª£ÁêÜ
  // 1: ‰ø°‰ªªÁ¨¨‰∏ÄÂ±Ç‰ª£ÁêÜÔºàÊé®ËçêÔºöNginx/Ë¥üËΩΩÂùáË°°Âô®Ôºâ
  // 'loopback': ‰ø°‰ªªÊú¨Âú∞ÂõûÁéØÂú∞ÂùÄÔºà127.0.0.1, ::1Ôºâ
  // '192.168.0.0/16': ‰ø°‰ªªÁâπÂÆöÁΩëÊÆµÁöÑ‰ª£ÁêÜ
  app.set(
    'trust proxy',
    configService.get('app.env') === 'production' ? 1 : true,
  );

  // ÈÖçÁΩÆÈùôÊÄÅÊñá‰ª∂ÊúçÂä° - ÊâòÁÆ° public ÁõÆÂΩï
  app.useStaticAssets(join(__dirname, '..', 'public'), {
    prefix: '/', // Áõ¥Êé•‰ªéÊ†πË∑ØÂæÑËÆøÈóÆ
  });

  // ÂÖ®Â±ÄÂâçÁºÄÔºåÊéíÈô§Ê†πË∑ØÂæÑÂíåAPI‰ø°ÊÅØË∑ØÂæÑ
  app.setGlobalPrefix('api/v1', {
    exclude: [
      '', // Ê†πË∑ØÂæÑ /
      'api', // API‰ø°ÊÅØË∑ØÂæÑ /api
      'api/docs', // SwaggerÊñáÊ°£Ë∑ØÂæÑ
    ],
  });

  // ÂÆâÂÖ®‰∏≠Èó¥‰ª∂
  app.use(
    helmet({
      contentSecurityPolicy: {
        directives: {
          defaultSrc: ["'self'"],
          styleSrc: ["'self'", "'unsafe-inline'"],
          scriptSrc: ["'self'"],
          imgSrc: ["'self'", 'data:', 'https:'],
        },
      },
      crossOriginEmbedderPolicy: false,
    }),
  );

  // CORSÈÖçÁΩÆ
  app.enableCors({
    origin: configService.get('app.allowedOrigins')?.split(',') || [
      'http://localhost:8000',
    ],
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
  });

  // ÂìçÂ∫îÂéãÁº©
  app.use(compression());

  // ËØ∑Ê±ÇÂ§ßÂ∞èÈôêÂà∂
  app.use(express.json({ limit: '10mb' }));
  app.use(express.urlencoded({ extended: true, limit: '10mb' }));

  // ÂÖ®Â±ÄÁÆ°ÈÅì
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
      disableErrorMessages: configService.get('app.env') === 'production',
    }),
  );

  // ÂÖ®Â±ÄËøáÊª§Âô®ÔºàÈÄöËøá‰æùËµñÊ≥®ÂÖ•Ëé∑ÂèñÂÆû‰æãÔºâ
  const allExceptionsFilter = app.get(AllExceptionsFilter);
  app.useGlobalFilters(allExceptionsFilter);

  // Ê≥®ÊÑèÔºöÂÖ®Â±ÄÊã¶Êà™Âô®Â∑≤Âú® AppModule ‰∏≠ÈÄöËøá APP_INTERCEPTOR Ê≥®ÂÜå
  // - ResponseInterceptor: Áªü‰∏ÄÂìçÂ∫îÊ†ºÂºèÂíåÊó∂Âå∫ËΩ¨Êç¢
  // - LoggingInterceptor: API Êó•ÂøóËÆ∞ÂΩï

  // SwaggerÊñáÊ°£ÈÖçÁΩÆ
  if (configService.get('app.env') !== 'production') {
    const config = new DocumentBuilder()
      .setTitle('Enterprise NestJS API')
      .setDescription('‰ºÅ‰∏öÁ∫ßNestJSÂêéÁ´ØAPIÊñáÊ°£')
      .setVersion('1.0')
      .addBearerAuth(
        {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
          name: 'JWT',
          description: 'Enter JWT token',
          in: 'header',
        },
        'JWT-auth',
      )
      .addTag('Auth', 'ËÆ§ËØÅÁõ∏ÂÖ≥Êé•Âè£')
      .addTag('Users', 'Áî®Êà∑ÁÆ°ÁêÜ')
      .addTag('Admin', 'ÁÆ°ÁêÜÂêéÂè∞')
      .addTag('Public', 'ÂÖ¨ÂºÄÊé•Âè£')
      .addTag('Health', 'ÂÅ•Â∫∑Ê£ÄÊü•')
      .build();

    const document = SwaggerModule.createDocument(app, config);
    SwaggerModule.setup('api/docs', app, document, {
      swaggerOptions: {
        persistAuthorization: true,
      },
    });
  }

  const port = configService.get('app.port') || 8000;
  const host = configService.get('app.host') || 'localhost';

  await app.listen(port, host);

  loggerService.log(`üöÄ Application is running on: http://${host}:${port}`);
  loggerService.log(`üìö API Documentation: http://${host}:${port}/api/docs`);
}

bootstrap().catch(error => {
  console.error('‚ùå Error starting the application:', error);
  process.exit(1);
});
